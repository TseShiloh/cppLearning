////下级别的成员除了拥有上一级别的共性，还有自己的特性
////用继承的技术可以减少重复的代码
//
////语法：class 子类 : 继承方式 父类
////子类 也称为 派生类
////父类 也称为 基类
//
////子类中的成员包含两大部分：
////一部分是从基类继承过来的，一部分是自己增加的成员。
////从基类继承过来的表现其共性，增加的成员表现其个性。
//
////三种继承方式：
////公共继承、保护继承、私有继承
//
//#include<iostream>
//#include<string>
//
//using namespace std;
//
//class Base
//{
//public:
//	int m_a;
//protected:
//	int m_b;
//private:
//	int m_c;
//};
//
////1.公共继承
//class Son1 : public Base
//{
//public:
//	void func()
//	{
//		m_a = 10; //父类中的 公共权限成员 到子类中依然是公共权限
//		m_b = 20; //父类中的 保护权限成员 到子类中依然是保护权限
//		//m_c = 30; //父类中的 私有权限成员 子类访问不到
//	}
//};
//
////2.保护继承
//class Son2 : protected Base
//{
//public:
//	void func()
//	{
//		m_a = 10; //父类中的 公共权限成员 到子类中变为了保护权限
//		m_b = 20; //父类中的 保护权限成员 到子类中依然是保护权限
//		//m_c = 30; //父类中的 私有权限成员 子类访问不到
//	}
//};
//
//
////3.私有继承
//class Son3 : private Base
//{
//public:
//	void func()
//	{
//		m_a = 10; //父类中的 公共权限成员 到子类中变为了私有权限
//		m_b = 20; //父类中的 保护权限成员 到子类中变为了私有权限
//		//m_c = 30; //父类中的 私有权限成员 子类访问不到
//	}
//};
////3.1 验证Son3的成员在类外访问不到的原因是私有继承，而不是保护继承。
//class Grandson3 : public Son3
//{
//public:
//	void func()
//	{
//		//m_b = 100;
//		//m_a = 100; 
//		//到了Son3中，m_a和m_b已经变为了私有成员，即使作为Son3的儿子，Grandson3也是访问不到的。
//	}
//};
//
//void test01()
//{
//	Son1 s1;
//	s1.m_a = 100; //说明在Son1中m_a是公共权限，类外依然可以访问
//	//s1.m_b = 100; //说明在Son1中m_b是保护权限，类外访问不到
//
//	Son2 s2;
//	//s2.m_a = 100; //说明在Son2中m_a是保护权限，类外访问不到
//	//s2.m_b = 100; //说明在Son2中m_b是保护权限，类外访问不到
//
//	Son3 s3;
//	
//}
//
//int main()
//{
//	test01();
//	return 0;
//}